import { CHAINS } from "@certusone/wormhole-sdk";

export const listAddr = {
  [84532]: {
    WORMHOLE_CORE_ADDRESS: "0x79A1027a6A159502049F10906D333EC57E95F083",
    TOKEN_BRIDGE_ADDRESS: "0x86F55A04690fd7815A3D802bD587e83eA888B239",
    WORMHOLE_RELAYER_ADDRESS: "0x93BAD53DDfB6132b0aC8E37f6029163E63372cEE",
    CIRCLE_INTEGRATION: "0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c",
    WSOL_ADDRESS: "0x66a00769800e651e9dbba384d2b41a45a9660912",
    WORMHOLE_INTEGRATION: "0x840f47D6fb3F88665072224EdB4CDc17EafE21e0",
  },
  [421614]: {
    WORMHOLE_CORE_ADDRESS: "0x6b9C8671cdDC8dEab9c719bB87cBd3e782bA6a35",
    TOKEN_BRIDGE_ADDRESS: "0xC7A204bDBFe983FCD8d8E61D02b475D4073fF97e",
    WORMHOLE_RELAYER_ADDRESS: "0x7B1bD7a6b4E61c2a123AC6BC2cbfC614437D0470",
    CIRCLE_INTEGRATION: "0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c",
    CIRCLE_BRIDGE: "0x9f3B8679c73C2Fef8b59B4f3444d4e156fb70AA5",
    USDC_ADDRESS: "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d",
    WSOL_ADDRESS: "0x8fa84ef8aDe8052D432A3d61765E8f9BD82138eB",
    WORMHOLE_INTEGRATION: "0x627391242cfc8e5f3dB48707b272f219b1a579b0",
  },
  // Not enough fund for BSC[97]
  [97]: {
    WORMHOLE_CORE_ADDRESS: "0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D",
    TOKEN_BRIDGE_ADDRESS: "0x9dcF9D205C9De35334D646BeE44b2D2859712A09",
    WORMHOLE_RELAYER_ADDRESS: "0x80aC94316391752A193C1c47E27D382b507c93F3",
    CIRCLE_INTEGRATION: "0x0000000000000000000000000000000000000000", // Zero address
    USDC_ADDRESS: "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
    WORMHOLE_INTEGRATION: "0x3a74D3F9614ab46a7df840a487d988c410A52053"
  },
  [43113]: {
    WORMHOLE_CORE_ADDRESS: "0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C",
    TOKEN_BRIDGE_ADDRESS: "0x61E44E506Ca5659E6c0bba9b678586fA2d729756",
    WORMHOLE_RELAYER_ADDRESS: "0xA3cF45939bD6260bcFe3D66bc73d60f19e49a8BB",
    CIRCLE_INTEGRATION: "0x58f4c17449c90665891c42e14d34aae7a26a472e",
    WSOL_ADDRESS: "0xb10563644a6AB8948ee6d7f5b0a1fb15AaEa1E03",
    WORMHOLE_INTEGRATION: "0xb904F68bD0a99E6d33698fCC98BBff3735Da3d5F"
  },
};

export const domain = {
  Ethereum: 0,
  Avalanche: 1,
  Optimism: 2,
  Arbitrum: 3,
  Noble: 4,
  Solana: 5,
  Base: 6,
  Polygon: 7,
  Sui: 8,
  Aptos: 9,
}

export const nativeChainId = {
  [CHAINS.base_sepolia]: 84532,
  [CHAINS.arbitrum_sepolia]: 421614,
  [CHAINS.bsc]: 97,
  [CHAINS.avalanche]: 43113,
};

/**
 *
 * @param name
 * @param chainId
 */
export const getAddr = (
  name: string,
  chainId: number
): string => {
  const addresses = listAddr[chainId as ChainId];
  return addresses[name as keyof typeof addresses]!;
};

export type ChainId = keyof typeof listAddr;
export type WormholeChainId = keyof typeof nativeChainId;