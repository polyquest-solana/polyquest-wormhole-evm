/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WormholeBaseBridge {
  export type TokenTransferStruct = {
    payloadID: BigNumberish;
    recipient: BytesLike;
  };

  export type TokenTransferStructOutput = [
    payloadID: bigint,
    recipient: string
  ] & { payloadID: bigint; recipient: string };
}

export interface WormholeBaseBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONSISTENCY_LEVEL"
      | "MESSAGE_TIME_OUT_SECONDS"
      | "addUsdcAddress"
      | "circleIntegration"
      | "decodePayload"
      | "getMessageFee"
      | "getSourceAddress"
      | "getWormholeChainId"
      | "policy"
      | "programAddress"
      | "pullPolicy"
      | "pushPolicy"
      | "receiveMessage"
      | "redeemTransferWithPayload"
      | "renouncePolicy"
      | "sendMessage"
      | "tokenBridge"
      | "updateReceiverAddress"
      | "updateSenderAddress"
      | "wormhole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "TransferToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONSISTENCY_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MESSAGE_TIME_OUT_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUsdcAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "circleIntegration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodePayload",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWormholeChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "programAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushPolicy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTransferWithPayload",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReceiverAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSenderAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CONSISTENCY_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MESSAGE_TIME_OUT_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUsdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circleIntegration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWormholeChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "programAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pullPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemTransferWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferTokenEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WormholeBaseBridge extends BaseContract {
  connect(runner?: ContractRunner | null): WormholeBaseBridge;
  waitForDeployment(): Promise<this>;

  interface: WormholeBaseBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONSISTENCY_LEVEL: TypedContractMethod<[], [bigint], "view">;

  MESSAGE_TIME_OUT_SECONDS: TypedContractMethod<[], [bigint], "view">;

  addUsdcAddress: TypedContractMethod<
    [sourceAddress: BytesLike, usdc: AddressLike],
    [void],
    "nonpayable"
  >;

  circleIntegration: TypedContractMethod<[], [string], "view">;

  decodePayload: TypedContractMethod<
    [encodedMessage: BytesLike],
    [WormholeBaseBridge.TokenTransferStructOutput],
    "view"
  >;

  getMessageFee: TypedContractMethod<[], [bigint], "view">;

  getSourceAddress: TypedContractMethod<
    [tokenAddress: BytesLike, sourceChain: BigNumberish],
    [string],
    "view"
  >;

  getWormholeChainId: TypedContractMethod<[], [bigint], "view">;

  policy: TypedContractMethod<[], [string], "view">;

  programAddress: TypedContractMethod<[], [string], "view">;

  pullPolicy: TypedContractMethod<[], [void], "nonpayable">;

  pushPolicy: TypedContractMethod<
    [newPolicy_: AddressLike],
    [void],
    "nonpayable"
  >;

  receiveMessage: TypedContractMethod<
    [_whMessage: BytesLike],
    [void],
    "payable"
  >;

  redeemTransferWithPayload: TypedContractMethod<
    [encodedTransferMessage: BytesLike],
    [void],
    "nonpayable"
  >;

  renouncePolicy: TypedContractMethod<[], [void], "nonpayable">;

  sendMessage: TypedContractMethod<
    [
      _bettingToken: AddressLike,
      _amount: BigNumberish,
      _marketId: BigNumberish,
      _answerId: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  tokenBridge: TypedContractMethod<[], [string], "view">;

  updateReceiverAddress: TypedContractMethod<
    [_newAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  updateSenderAddress: TypedContractMethod<
    [_chainId: BigNumberish, _senderAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  wormhole: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONSISTENCY_LEVEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MESSAGE_TIME_OUT_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addUsdcAddress"
  ): TypedContractMethod<
    [sourceAddress: BytesLike, usdc: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "circleIntegration"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decodePayload"
  ): TypedContractMethod<
    [encodedMessage: BytesLike],
    [WormholeBaseBridge.TokenTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessageFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSourceAddress"
  ): TypedContractMethod<
    [tokenAddress: BytesLike, sourceChain: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWormholeChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "policy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "programAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pullPolicy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pushPolicy"
  ): TypedContractMethod<[newPolicy_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receiveMessage"
  ): TypedContractMethod<[_whMessage: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "redeemTransferWithPayload"
  ): TypedContractMethod<
    [encodedTransferMessage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renouncePolicy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      _bettingToken: AddressLike,
      _amount: BigNumberish,
      _marketId: BigNumberish,
      _answerId: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tokenBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateReceiverAddress"
  ): TypedContractMethod<[_newAddress: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSenderAddress"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _senderAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wormhole"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransferToken"
  ): TypedContractEvent<
    TransferTokenEvent.InputTuple,
    TransferTokenEvent.OutputTuple,
    TransferTokenEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TransferToken(address,uint256)": TypedContractEvent<
      TransferTokenEvent.InputTuple,
      TransferTokenEvent.OutputTuple,
      TransferTokenEvent.OutputObject
    >;
    TransferToken: TypedContractEvent<
      TransferTokenEvent.InputTuple,
      TransferTokenEvent.OutputTuple,
      TransferTokenEvent.OutputObject
    >;
  };
}
