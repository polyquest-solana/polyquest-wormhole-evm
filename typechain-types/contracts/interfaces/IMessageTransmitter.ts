/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IMessageTransmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attesterManager"
      | "availableNonces"
      | "disableAttester"
      | "enableAttester"
      | "getEnabledAttester"
      | "getNumEnabledAttesters"
      | "isEnabledAttester"
      | "localDomain"
      | "maxMessageBodySize"
      | "owner"
      | "paused"
      | "pauser"
      | "receiveMessage"
      | "rescuer"
      | "setSignatureThreshold"
      | "transferOwnership"
      | "updateAttesterManager"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MessageSent" | "MintAndWithdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attesterManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableNonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledAttester",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumEnabledAttesters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabledAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMessageBodySize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rescuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSignatureThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttesterManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "attesterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumEnabledAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEnabledAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMessageBodySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttesterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace MessageSentEvent {
  export type InputTuple = [message: BytesLike];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintAndWithdrawEvent {
  export type InputTuple = [
    _mintRecipient: AddressLike,
    _amount: BigNumberish,
    _mintToken: AddressLike
  ];
  export type OutputTuple = [
    _mintRecipient: string,
    _amount: bigint,
    _mintToken: string
  ];
  export interface OutputObject {
    _mintRecipient: string;
    _amount: bigint;
    _mintToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMessageTransmitter extends BaseContract {
  connect(runner?: ContractRunner | null): IMessageTransmitter;
  waitForDeployment(): Promise<this>;

  interface: IMessageTransmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attesterManager: TypedContractMethod<[], [string], "view">;

  availableNonces: TypedContractMethod<
    [domain: BigNumberish],
    [bigint],
    "view"
  >;

  disableAttester: TypedContractMethod<
    [_attester: AddressLike],
    [void],
    "nonpayable"
  >;

  enableAttester: TypedContractMethod<
    [_attester: AddressLike],
    [void],
    "nonpayable"
  >;

  getEnabledAttester: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  getNumEnabledAttesters: TypedContractMethod<[], [bigint], "view">;

  isEnabledAttester: TypedContractMethod<
    [_attester: AddressLike],
    [boolean],
    "view"
  >;

  localDomain: TypedContractMethod<[], [bigint], "view">;

  maxMessageBodySize: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pauser: TypedContractMethod<[], [string], "view">;

  receiveMessage: TypedContractMethod<
    [_message: BytesLike, _attestation: BytesLike],
    [boolean],
    "nonpayable"
  >;

  rescuer: TypedContractMethod<[], [string], "view">;

  setSignatureThreshold: TypedContractMethod<
    [newSignatureThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAttesterManager: TypedContractMethod<
    [_newAttesterManager: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attesterManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "availableNonces"
  ): TypedContractMethod<[domain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableAttester"
  ): TypedContractMethod<[_attester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableAttester"
  ): TypedContractMethod<[_attester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEnabledAttester"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getNumEnabledAttesters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEnabledAttester"
  ): TypedContractMethod<[_attester: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "localDomain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMessageBodySize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveMessage"
  ): TypedContractMethod<
    [_message: BytesLike, _attestation: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rescuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setSignatureThreshold"
  ): TypedContractMethod<
    [newSignatureThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAttesterManager"
  ): TypedContractMethod<
    [_newAttesterManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "MintAndWithdraw"
  ): TypedContractEvent<
    MintAndWithdrawEvent.InputTuple,
    MintAndWithdrawEvent.OutputTuple,
    MintAndWithdrawEvent.OutputObject
  >;

  filters: {
    "MessageSent(bytes)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "MintAndWithdraw(address,uint256,address)": TypedContractEvent<
      MintAndWithdrawEvent.InputTuple,
      MintAndWithdrawEvent.OutputTuple,
      MintAndWithdrawEvent.OutputObject
    >;
    MintAndWithdraw: TypedContractEvent<
      MintAndWithdrawEvent.InputTuple,
      MintAndWithdrawEvent.OutputTuple,
      MintAndWithdrawEvent.OutputObject
    >;
  };
}
