/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type VaaKeyStruct = {
  chainId: BigNumberish;
  emitterAddress: BytesLike;
  sequence: BigNumberish;
};

export type VaaKeyStructOutput = [
  chainId: bigint,
  emitterAddress: string,
  sequence: bigint
] & { chainId: bigint; emitterAddress: string; sequence: bigint };

export type MessageKeyStruct = { keyType: BigNumberish; encodedKey: BytesLike };

export type MessageKeyStructOutput = [keyType: bigint, encodedKey: string] & {
  keyType: bigint;
  encodedKey: string;
};

export interface IWormholeRelayerSendInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deliveryAttempted"
      | "deliveryFailureBlock"
      | "deliverySuccessBlock"
      | "getDefaultDeliveryProvider"
      | "getRegisteredWormholeRelayerContract"
      | "quoteDeliveryPrice"
      | "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"
      | "quoteEVMDeliveryPrice(uint16,uint256,uint256)"
      | "quoteNativeForChain"
      | "resend"
      | "resendToEvm"
      | "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"
      | "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"
      | "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"
      | "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"
      | "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"
      | "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"
      | "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"
      | "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SendEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "deliveryAttempted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryFailureBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deliverySuccessBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultDeliveryProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredWormholeRelayerContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [BigNumberish, BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteNativeForChain",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resend",
    values: [VaaKeyStruct, BigNumberish, BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resendToEvm",
    values: [
      VaaKeyStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      VaaKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      MessageKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)",
    values: [BigNumberish, AddressLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      VaaKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      MessageKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[],
      BigNumberish,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deliveryAttempted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliveryFailureBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliverySuccessBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultDeliveryProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredWormholeRelayerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteNativeForChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resendToEvm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)",
    data: BytesLike
  ): Result;
}

export namespace SendEventEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    deliveryQuote: BigNumberish,
    paymentForExtraReceiverValue: BigNumberish
  ];
  export type OutputTuple = [
    sequence: bigint,
    deliveryQuote: bigint,
    paymentForExtraReceiverValue: bigint
  ];
  export interface OutputObject {
    sequence: bigint;
    deliveryQuote: bigint;
    paymentForExtraReceiverValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWormholeRelayerSend extends BaseContract {
  connect(runner?: ContractRunner | null): IWormholeRelayerSend;
  waitForDeployment(): Promise<this>;

  interface: IWormholeRelayerSendInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deliveryAttempted: TypedContractMethod<
    [deliveryHash: BytesLike],
    [boolean],
    "view"
  >;

  deliveryFailureBlock: TypedContractMethod<
    [deliveryHash: BytesLike],
    [bigint],
    "view"
  >;

  deliverySuccessBlock: TypedContractMethod<
    [deliveryHash: BytesLike],
    [bigint],
    "view"
  >;

  getDefaultDeliveryProvider: TypedContractMethod<[], [string], "view">;

  getRegisteredWormholeRelayerContract: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    "view"
  >;

  quoteDeliveryPrice: TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: AddressLike
    ],
    [
      [bigint, string] & {
        nativePriceQuote: bigint;
        encodedExecutionInfo: string;
      }
    ],
    "view"
  >;

  "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: AddressLike
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      }
    ],
    "view"
  >;

  "quoteEVMDeliveryPrice(uint16,uint256,uint256)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      }
    ],
    "view"
  >;

  quoteNativeForChain: TypedContractMethod<
    [
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: AddressLike
    ],
    [bigint],
    "view"
  >;

  resend: TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;

  resendToEvm: TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;

  "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;

  "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[]
    ],
    [bigint],
    "payable"
  >;

  "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deliveryAttempted"
  ): TypedContractMethod<[deliveryHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deliveryFailureBlock"
  ): TypedContractMethod<[deliveryHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deliverySuccessBlock"
  ): TypedContractMethod<[deliveryHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDefaultDeliveryProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegisteredWormholeRelayerContract"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: AddressLike
    ],
    [
      [bigint, string] & {
        nativePriceQuote: bigint;
        encodedExecutionInfo: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: AddressLike
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteEVMDeliveryPrice(uint16,uint256,uint256)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteNativeForChain"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "resend"
  ): TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "resendToEvm"
  ): TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: AddressLike
    ],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "SendEvent"
  ): TypedContractEvent<
    SendEventEvent.InputTuple,
    SendEventEvent.OutputTuple,
    SendEventEvent.OutputObject
  >;

  filters: {
    "SendEvent(uint64,uint256,uint256)": TypedContractEvent<
      SendEventEvent.InputTuple,
      SendEventEvent.OutputTuple,
      SendEventEvent.OutputObject
    >;
    SendEvent: TypedContractEvent<
      SendEventEvent.InputTuple,
      SendEventEvent.OutputTuple,
      SendEventEvent.OutputObject
    >;
  };
}
