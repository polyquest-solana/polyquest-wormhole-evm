/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ICircleBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICircleBridge__factory>;
    getContractFactory(
      name: "ICircleIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICircleIntegration__factory>;
    getContractFactory(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageTransmitter__factory>;
    getContractFactory(
      name: "IPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPolicy__factory>;
    getContractFactory(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenBridge__factory>;
    getContractFactory(
      name: "ITokenMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMinter__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormhole__factory>;
    getContractFactory(
      name: "IWormholeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeReceiver__factory>;
    getContractFactory(
      name: "IWormholeRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayer__factory>;
    getContractFactory(
      name: "IWormholeRelayerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayerBase__factory>;
    getContractFactory(
      name: "IWormholeRelayerDelivery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayerDelivery__factory>;
    getContractFactory(
      name: "IWormholeRelayerSend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayerSend__factory>;
    getContractFactory(
      name: "Policy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Policy__factory>;
    getContractFactory(
      name: "WormholeBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WormholeBridge__factory>;

    getContractAt(
      name: "IERC1363",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ICircleBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICircleBridge>;
    getContractAt(
      name: "ICircleIntegration",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICircleIntegration>;
    getContractAt(
      name: "IMessageTransmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageTransmitter>;
    getContractAt(
      name: "IPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPolicy>;
    getContractAt(
      name: "ITokenBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenBridge>;
    getContractAt(
      name: "ITokenMinter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMinter>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWormhole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormhole>;
    getContractAt(
      name: "IWormholeReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeReceiver>;
    getContractAt(
      name: "IWormholeRelayer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayer>;
    getContractAt(
      name: "IWormholeRelayerBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayerBase>;
    getContractAt(
      name: "IWormholeRelayerDelivery",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayerDelivery>;
    getContractAt(
      name: "IWormholeRelayerSend",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayerSend>;
    getContractAt(
      name: "Policy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Policy>;
    getContractAt(
      name: "WormholeBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WormholeBridge>;

    deployContract(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ICircleBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICircleBridge>;
    deployContract(
      name: "ICircleIntegration",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICircleIntegration>;
    deployContract(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "IPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPolicy>;
    deployContract(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenBridge>;
    deployContract(
      name: "ITokenMinter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMinter>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormhole>;
    deployContract(
      name: "IWormholeReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeReceiver>;
    deployContract(
      name: "IWormholeRelayer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayer>;
    deployContract(
      name: "IWormholeRelayerBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerBase>;
    deployContract(
      name: "IWormholeRelayerDelivery",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerDelivery>;
    deployContract(
      name: "IWormholeRelayerSend",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerSend>;
    deployContract(
      name: "Policy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Policy>;
    deployContract(
      name: "WormholeBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeBridge>;

    deployContract(
      name: "IERC1363",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ICircleBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICircleBridge>;
    deployContract(
      name: "ICircleIntegration",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICircleIntegration>;
    deployContract(
      name: "IMessageTransmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "IPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPolicy>;
    deployContract(
      name: "ITokenBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenBridge>;
    deployContract(
      name: "ITokenMinter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMinter>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IWormhole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormhole>;
    deployContract(
      name: "IWormholeReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeReceiver>;
    deployContract(
      name: "IWormholeRelayer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayer>;
    deployContract(
      name: "IWormholeRelayerBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerBase>;
    deployContract(
      name: "IWormholeRelayerDelivery",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerDelivery>;
    deployContract(
      name: "IWormholeRelayerSend",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerSend>;
    deployContract(
      name: "Policy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Policy>;
    deployContract(
      name: "WormholeBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeBridge>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
