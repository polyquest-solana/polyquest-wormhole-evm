/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPolicy,
  IPolicyInterface,
} from "../../../contracts/interfaces/IPolicy";

const _abi = [
  {
    inputs: [],
    name: "policy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pullPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newPolicy_",
        type: "address",
      },
    ],
    name: "pushPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renouncePolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPolicy__factory {
  static readonly abi = _abi;
  static createInterface(): IPolicyInterface {
    return new Interface(_abi) as IPolicyInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IPolicy {
    return new Contract(address, _abi, runner) as unknown as IPolicy;
  }
}
